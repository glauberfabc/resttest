
-- Create a table for public profiles
create table if not exists public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  name varchar(255),
  role varchar(50) default 'collaborator'
);

-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;

-- Policies for profiles
drop policy if exists "Users can view their own profile." on public.profiles;
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);

drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);

drop policy if exists "Users can update own profile." on public.profiles;
create policy "Users can update own profile." on public.profiles for update using (auth.uid() = id) with check (auth.uid() = id);

-- This trigger automatically creates a profile for new users.
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, name, role)
  values (new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'role');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger the function after a new user is created
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Create menu_items table
create table if not exists public.menu_items (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) on delete cascade not null default auth.uid(),
    name text not null,
    description text,
    price numeric not null,
    category text not null,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for menu_items
alter table public.menu_items enable row level security;

drop policy if exists "Users can manage their own menu items." on public.menu_items;
create policy "Users can manage their own menu items." on public.menu_items for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);

-- Create clients table
create table if not exists public.clients (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users(id) on delete cascade not null default auth.uid(),
    name text not null,
    phone text,
    document text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for clients
alter table public.clients enable row level security;

drop policy if exists "Users can manage their own clients." on public.clients;
create policy "Users can manage their own clients." on public.clients for all
using (auth.uid() = user_id)
with check (auth.uid() = user_id);


-- Set up storage
insert into storage.buckets (id, name, public)
values ('product_images', 'product_images', true)
on conflict (id) do nothing;

-- Policies for storage
drop policy if exists "Authenticated users can upload product images" on storage.objects;
create policy "Authenticated users can upload product images" on storage.objects for insert to authenticated with check (
    bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Users can view their own product images" on storage.objects;
create policy "Users can view their own product images" on storage.objects for select to authenticated using (
    bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Users can update their own product images" on storage.objects;
create policy "Users can update their own product images" on storage.objects for update to authenticated using (
    bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Users can delete their own product images" on storage.objects;
create policy "Users can delete their own product images" on storage.objects for delete to authenticated using (
    bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);
