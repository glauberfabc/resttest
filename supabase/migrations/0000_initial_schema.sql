--
-- Create a table for public profiles
--
create table if not exists public.profiles (
  id uuid not null references auth.users on delete cascade,
  name text,
  role text,
  primary key (id)
);

alter table public.profiles enable row level security;

--
-- Create RLS policies for profiles table
--
drop policy if exists "Public profiles are viewable by everyone." on public.profiles;
create policy "Public profiles are viewable by everyone." on public.profiles for select using (true);

drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);

--
-- Create a table for menu items
--
create table if not exists public.menu_items (
    id bigint generated by default as identity primary key,
    name text not null,
    description text,
    price real not null,
    category text,
    image_url text
);

alter table public.menu_items enable row level security;

--
-- Create RLS policies for menu_items table
--
drop policy if exists "Menu items are viewable by everyone." on public.menu_items;
create policy "Menu items are viewable by everyone." on public.menu_tables for select using (true);

drop policy if exists "Admin and collaborators can insert menu items." on public.menu_items;
create policy "Admin and collaborators can insert menu items." on public.menu_items for insert with check (
  (get_my_claim('role'::text)) = '"admin"'::jsonb or
  (get_my_claim('role'::text)) = '"collaborator"'::jsonb
);

drop policy if exists "Admin and collaborators can update menu items." on public.menu_items;
create policy "Admin and collaborators can update menu items." on public.menu_items for update using (
  (get_my_claim('role'::text)) = '"admin"'::jsonb or
  (get_my_claim('role'::text)) = '"collaborator"'::jsonb
);

drop policy if exists "Admin can delete menu items." on public.menu_items;
create policy "Admin can delete menu items." on public.menu_items for delete using (
  (get_my_claim('role'::text)) = '"admin"'::jsonb
);

--
-- Create a table for tables
--
create table if not exists public.menu_tables (
    id bigint generated by default as identity primary key,
    table_number integer not null unique
);

alter table public.menu_tables enable row level security;

--
-- Create RLS policies for menu_tables table
--
drop policy if exists "Tables are viewable by everyone." on public.menu_tables;
create policy "Tables are viewable by everyone." on public.menu_tables for select using (true);

drop policy if exists "Admin and collaborators can insert tables." on public.menu_tables;
create policy "Admin and collaborators can insert tables." on public.menu_tables for insert with check (
  (get_my_claim('role'::text)) = '"admin"'::jsonb or
  (get_my_claim('role'::text)) = '"collaborator"'::jsonb
);

drop policy if exists "Admin and collaborators can update tables." on public.menu_tables;
create policy "Admin and collaborators can update tables." on public.menu_tables for update using (
  (get_my_claim('role'::text)) = '"admin"'::jsonb or
  (get_my_claim('role'::text)) = '"collaborator"'::jsonb
);

drop policy if exists "Admin can delete tables." on public.menu_tables;
create policy "Admin can delete tables." on public.menu_tables for delete using (
  (get_my_claim('role'::text)) = '"admin"'::jsonb
);

--
-- This trigger automatically creates a profile for new users.
--
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, name, role)
  values (new.id, new.raw_user_meta_data->>'name', 'collaborator');
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

--
-- Create a bucket for product images
--
insert into storage.buckets (id, name, public)
values ('product_images', 'product_images', true)
on conflict (id) do nothing;

--
-- Create RLS policies for product_images bucket
--
drop policy if exists "Product images are publicly viewable." on storage.objects;
create policy "Product images are publicly viewable." on storage.objects for select
  using ( bucket_id = 'product_images' );

drop policy if exists "Admin and collaborators can upload product images." on storage.objects;
create policy "Admin and collaborators can upload product images." on storage.objects for insert
  with check (
    bucket_id = 'product_images' and (
      (get_my_claim('role'::text)) = '"admin"'::jsonb or
      (get_my_claim('role'::text)) = '"collaborator"'::jsonb
    )
  );

drop policy if exists "Admin and collaborators can update product images." on storage.objects;
create policy "Admin and collaborators can update product images." on storage.objects for update
  using (
    bucket_id = 'product_images' and (
      (get_my_claim('role'::text)) = '"admin"'::jsonb or
      (get_my_claim('role'::text)) = '"collaborator"'::jsonb
    )
  );

drop policy if exists "Admin and collaborators can delete product images." on storage.objects;
create policy "Admin and collaborators can delete product images." on storage.objects for delete
  using (
    bucket_id = 'product_images' and (
      (get_my_claim('role'::text)) = '"admin"'::jsonb or
      (get_my_claim('role'::text)) = '"collaborator"'::jsonb
    )
  );
