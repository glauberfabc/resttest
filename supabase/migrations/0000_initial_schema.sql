-- Create a custom type for user roles
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create a table for public profiles
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name text,
  role app_role NOT NULL DEFAULT 'collaborator',
  PRIMARY KEY (id)
);
COMMENT ON TABLE public.profiles IS 'Public user profiles, safe to expose to clients.';

-- Create a table for menu items
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    price numeric(10, 2) NOT NULL,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text,
    created_at timestamptz DEFAULT now()
);
COMMENT ON TABLE public.menu_items IS 'Stores the menu items for the restaurant.';


-- Allow public read access to profiles
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone."
  ON public.profiles FOR SELECT
  USING (true);

-- Allow users to insert their own profile
DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile."
  ON public.profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

-- Allow users to update their own profile
DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- Allow auth admins or the user themselves to delete a profile
DROP POLICY IF EXISTS "Admins or users can delete their own profile." ON public.profiles;
CREATE POLICY "Admins or users can delete their own profile."
  ON public.profiles FOR DELETE
  USING (auth.uid() = id OR (SELECT auth.role()) = 'supabase_auth_admin');


-- Set up the trigger function to handle new user sign-ups
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO public.profiles (id, name, role)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'name', 'collaborator');
  RETURN NEW;
END;
$$;

-- Trigger the function after a new user is created
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Add Policies for menu_items table
-- 1. Allow public read access
DROP POLICY IF EXISTS "Public can view menu items" ON public.menu_items;
CREATE POLICY "Public can view menu items" ON public.menu_items FOR SELECT USING (true);

-- 2. Allow admin/collaborator to insert
DROP POLICY IF EXISTS "Authenticated users can insert menu items" ON public.menu_items;
CREATE POLICY "Authenticated users can insert menu items" ON public.menu_items FOR INSERT WITH CHECK (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'collaborator')
);

-- 3. Allow admin/collaborator to update
DROP POLICY IF EXISTS "Authenticated users can update menu items" ON public.menu_items;
CREATE POLICY "Authenticated users can update menu items" ON public.menu_items FOR UPDATE USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'collaborator')
);

-- 4. Allow admin/collaborator to delete
DROP POLICY IF EXISTS "Authenticated users can delete menu items" ON public.menu_items;
CREATE POLICY "Authenticated users can delete menu items" ON public.menu_items FOR DELETE USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) IN ('admin', 'collaborator')
);