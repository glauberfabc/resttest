-- Create app_role type
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    role public.app_role NOT NULL DEFAULT 'collaborator'
);

-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO public.profiles (id, name, role)
    VALUES (
        new.id,
        new.raw_user_meta_data ->> 'name',
        'collaborator'
    );
    RETURN new;
END;
$$;

-- Trigger to call handle_new_user on new user
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

-- Enable RLS for profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles table
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "System can delete profiles." ON public.profiles;
CREATE POLICY "System can delete profiles." ON public.profiles FOR DELETE USING (auth.role() = 'supabase_auth_admin');


-- Create menu_items table
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    description text,
    price numeric(10, 2) NOT NULL,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Enable RLS for menu_items table
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;

-- Policies for menu_items table
DROP POLICY IF EXISTS "Authenticated users can view menu items." ON public.menu_items;
CREATE POLICY "Authenticated users can view menu items." ON public.menu_items FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Admins can manage menu items." ON public.menu_items;
CREATE POLICY "Admins can manage menu items." ON public.menu_items FOR ALL USING (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'
) WITH CHECK (
    (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'
);

-- Create product_images bucket
INSERT INTO storage.buckets (id, name, public)
VALUES ('product_images', 'product_images', false)
ON CONFLICT (id) DO NOTHING;

-- Policies for product_images bucket
DROP POLICY IF EXISTS "Authenticated users can manage product images" ON storage.objects;
CREATE POLICY "Authenticated users can manage product images" ON storage.objects FOR ALL TO authenticated USING (bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text);
