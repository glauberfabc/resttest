-- supabase/migrations/0000_initial_schema.sql

-- Create a custom type for user roles
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create the profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    role public.app_role NOT NULL DEFAULT 'collaborator'
);

-- Create the menu_items table
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid references auth.users on delete cascade not null default auth.uid(),
    name text NOT NULL,
    description text,
    price numeric(10, 2) NOT NULL,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text
);

-- Create the clients table
CREATE TABLE IF NOT EXISTS public.clients (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid references auth.users on delete cascade not null default auth.uid(),
    name text NOT NULL,
    phone text,
    document text
);


-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, name, role)
  VALUES (
    new.id, 
    new.raw_user_meta_data ->> 'name',
    (new.raw_user_meta_data ->> 'role')::public.app_role
  );
  return new;
END;
$$;

-- Trigger to call the function when a new user is created in auth.users
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Enable Row Level Security (RLS) for all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;

-- Policies for profiles table
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Admins can do anything to profiles" ON public.profiles;
CREATE POLICY "Admins can do anything to profiles" ON public.profiles FOR ALL
  USING ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin')
  WITH CHECK ((SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin');


-- Policies for menu_items table
DROP POLICY IF EXISTS "Allow authenticated users to read all menu items" ON public.menu_items;
CREATE POLICY "Allow authenticated users to read all menu items" ON public.menu_items FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to insert menu items" ON public.menu_items;
CREATE POLICY "Allow authenticated users to insert menu items" ON public.menu_items FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow owners to update their menu items" ON public.menu_items;
CREATE POLICY "Allow owners to update their menu items" ON public.menu_items FOR UPDATE TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow owners to delete their menu items" ON public.menu_items;
CREATE POLICY "Allow owners to delete their menu items" ON public.menu_items FOR DELETE TO authenticated USING (auth.uid() = user_id);

-- Policies for clients table
DROP POLICY IF EXISTS "Allow authenticated users to read clients" ON public.clients;
CREATE POLICY "Allow authenticated users to read clients" ON public.clients FOR SELECT TO authenticated USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow authenticated users to insert clients" ON public.clients;
CREATE POLICY "Allow authenticated users to insert clients" ON public.clients FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow owners to update their clients" ON public.clients;
CREATE POLICY "Allow owners to update their clients" ON public.clients FOR UPDATE TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Allow owners to delete their clients" ON public.clients;
CREATE POLICY "Allow owners to delete their clients" ON public.clients FOR DELETE TO authenticated USING (auth.uid() = user_id);


-- Create storage bucket for product images
INSERT INTO storage.buckets (id, name, public)
VALUES ('product_images', 'product_images', true)
ON CONFLICT (id) DO NOTHING;

-- Policies for product_images storage bucket
DROP POLICY IF EXISTS "Authenticated users can view product images" ON storage.objects;
CREATE POLICY "Authenticated users can view product images" ON storage.objects FOR SELECT TO authenticated USING (bucket_id = 'product_images');

DROP POLICY IF EXISTS "Authenticated users can upload product images" ON storage.objects;
CREATE POLICY "Authenticated users can upload product images" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);

DROP POLICY IF EXISTS "Authenticated users can update their own product images" ON storage.objects;
CREATE POLICY "Authenticated users can update their own product images" ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);

DROP POLICY IF EXISTS "Authenticated users can delete their own product images" ON storage.objects;
CREATE POLICY "Authenticated users can delete their own product images" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);
