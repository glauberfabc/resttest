-- Create app_role type
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    role public.app_role NOT NULL DEFAULT 'collaborator'::app_role
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Create menu_items table
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid references auth.users on delete cascade not null default auth.uid(),
    name text NOT NULL,
    description text,
    price numeric(10, 2) NOT NULL,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text
);
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;

-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, name, role)
  VALUES (
    new.id,
    new.raw_user_meta_data ->> 'name',
    (new.raw_user_meta_data ->> 'role')::public.app_role
  );
  return new;
END;
$$;

-- Trigger to call handle_new_user on new user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Create product_images bucket
INSERT INTO storage.buckets (id, name, public)
SELECT 'product_images', 'product_images', true
WHERE NOT EXISTS (
    SELECT 1 FROM storage.buckets WHERE id = 'product_images'
);

-- RLS Policies for profiles
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile." ON public.profiles;
CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

DROP POLICY IF EXISTS "System can delete profiles." ON public.profiles;
CREATE POLICY "System can delete profiles." ON public.profiles FOR DELETE USING (auth.role() = 'supabase_auth_admin');


-- RLS Policies for menu_items
DROP POLICY IF EXISTS "Users can view their own menu items." ON public.menu_items;
CREATE POLICY "Users can view their own menu items." ON public.menu_items FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own menu items." ON public.menu_items;
CREATE POLICY "Users can insert their own menu items." ON public.menu_items FOR INSERT WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own menu items." ON public.menu_items;
CREATE POLICY "Users can update their own menu items." ON public.menu_items FOR UPDATE USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own menu items." ON public.menu_items;
CREATE POLICY "Users can delete their own menu items." ON public.menu_items FOR DELETE USING (auth.uid() = user_id);


-- RLS Policies for product_images storage
DROP POLICY IF EXISTS "Authenticated users can view their own images." ON storage.objects;
CREATE POLICY "Authenticated users can view their own images." ON storage.objects FOR SELECT TO authenticated USING ((bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text));

DROP POLICY IF EXISTS "Authenticated users can insert their own images." ON storage.objects;
CREATE POLICY "Authenticated users can insert their own images." ON storage.objects FOR INSERT TO authenticated WITH CHECK ((bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text));

DROP POLICY IF EXISTS "Authenticated users can update their own images." ON storage.objects;
CREATE POLICY "Authenticated users can update their own images." ON storage.objects FOR UPDATE TO authenticated USING ((bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text));

DROP POLICY IF EXISTS "Authenticated users can delete their own images." ON storage.objects;
CREATE POLICY "Authenticated users can delete their own images." ON storage.objects FOR DELETE TO authenticated USING ((bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text));
