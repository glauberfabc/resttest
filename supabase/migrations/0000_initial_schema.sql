-- Create app_role type
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    role public.app_role NOT NULL DEFAULT 'collaborator'::public.app_role
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE public.profiles IS 'Profile data for each user.';
COMMENT ON COLUMN public.profiles.id IS 'References the internal user id from auth.users.';

-- Create menu_items table
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users on delete cascade not null default auth.uid(),
    name text not null,
    description text,
    price numeric(10, 2) not null,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text
);
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE public.menu_items IS 'Stores menu items for the application.';

-- Policies for profiles table
DROP POLICY IF EXISTS "Public profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Public profiles are viewable by everyone." ON public.profiles FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert their own profile." ON public.profiles;
CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Allow admin to manage any profile" ON public.profiles;
CREATE POLICY "Allow admin to manage any profile" ON public.profiles FOR ALL USING (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'
) WITH CHECK (
  (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin'
);


-- Policies for menu_items table
DROP POLICY IF EXISTS "Allow authenticated users to view menu items." ON public.menu_items;
CREATE POLICY "Allow authenticated users to view menu items." ON public.menu_items FOR SELECT TO authenticated USING (true);

DROP POLICY IF EXISTS "Allow users to manage their own menu items" ON public.menu_items;
CREATE POLICY "Allow users to manage their own menu items" ON public.menu_items FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Function and Trigger to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, name, role)
  VALUES (NEW.id, NEW.raw_user_meta_data ->> 'name', 'collaborator');
  RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Set up Storage
INSERT INTO storage.buckets (id, name, public)
VALUES ('product_images', 'product_images', false)
ON CONFLICT (id) DO NOTHING;

-- Policies for storage
DROP POLICY IF EXISTS "Allow authenticated select on product images" ON storage.objects;
CREATE POLICY "Allow authenticated select on product images" ON storage.objects
  FOR SELECT
  TO authenticated
  USING (bucket_id = 'product_images');

DROP POLICY IF EXISTS "Allow authenticated insert on product images" ON storage.objects;
CREATE POLICY "Allow authenticated insert on product images" ON storage.objects
  FOR INSERT
  TO authenticated
  WITH CHECK (bucket_id = 'product_images');
  
DROP POLICY IF EXISTS "Allow authenticated update on product images" ON storage.objects;
CREATE POLICY "Allow authenticated update on product images" ON storage.objects
  FOR UPDATE
  TO authenticated
  USING (bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text);

DROP POLICY IF EXISTS "Allow authenticated delete on product images" ON storage.objects;
CREATE POLICY "Allow authenticated delete on product images" ON storage.objects
  FOR DELETE
  TO authenticated
  USING (bucket_id = 'product_images' AND (storage.foldername(name))[1] = auth.uid()::text);
