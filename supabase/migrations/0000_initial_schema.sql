-- Use a block to create the type only if it doesn't exist.
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'app_role') THEN
        CREATE TYPE public.app_role AS ENUM ('admin', 'collaborator');
    END IF;
END
$$;

-- Create profiles table
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users ON DELETE CASCADE,
    name text,
    role public.app_role NOT NULL DEFAULT 'collaborator'::app_role
);

-- RLS for profiles table
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view their own profile." ON public.profiles;
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT
    USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile." ON public.profiles;
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE
    USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);

-- Function to handle new user creation and populate profiles
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
    INSERT INTO public.profiles (id, name, role)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'name',
        'collaborator' -- Default role
    );
    RETURN new;
END;
$$;

-- Trigger to call the function on new user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();

-- Create menu_items table
CREATE TABLE IF NOT EXISTS public.menu_items (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users on delete cascade not null default auth.uid(),
    name text not null,
    description text,
    price numeric(10, 2) not null,
    category text,
    image_url text,
    stock integer,
    low_stock_threshold integer,
    unit text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- RLS for menu_items table
ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can create menu items." ON public.menu_items;
CREATE POLICY "Users can create menu items." ON public.menu_items FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can view their own menu items." ON public.menu_items;
CREATE POLICY "Users can view their own menu items." ON public.menu_items FOR SELECT TO authenticated USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own menu items." ON public.menu_items;
CREATE POLICY "Users can update their own menu items." ON public.menu_items FOR UPDATE TO authenticated USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own menu items." ON public.menu_items;
CREATE POLICY "Users can delete their own menu items." ON public.menu_items FOR DELETE TO authenticated USING (auth.uid() = user_id);


-- Create storage bucket for product images
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('product_images', 'product_images', false, 2097152, ARRAY['image/jpeg', 'image/png', 'image/webp'])
ON CONFLICT (id) DO NOTHING;

-- RLS for storage bucket
-- Policy for SELECT
DROP POLICY IF EXISTS "Authenticated users can view their own images" ON storage.objects;
CREATE POLICY "Authenticated users can view their own images" ON storage.objects FOR SELECT TO authenticated
USING (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);

-- Policy for INSERT
DROP POLICY IF EXISTS "Authenticated users can upload images" ON storage.objects;
CREATE POLICY "Authenticated users can upload images" ON storage.objects FOR INSERT TO authenticated
WITH CHECK (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);

-- Policy for UPDATE
DROP POLICY IF EXISTS "Authenticated users can update their own images" ON storage.objects;
CREATE POLICY "Authenticated users can update their own images" ON storage.objects FOR UPDATE TO authenticated
USING (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);

-- Policy for DELETE
DROP POLICY IF EXISTS "Authenticated users can delete their own images" ON storage.objects;
CREATE POLICY "Authenticated users can delete their own images" ON storage.objects FOR DELETE TO authenticated
USING (bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text);
