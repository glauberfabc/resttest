
-- Habilita a extensão pgcrypto para usar gen_random_uuid()
create extension if not exists pgcrypto with schema extensions;

-- Habilita a Row Level Security (RLS) para a tabela de usuários
alter table auth.users enable row level security;

-- Cria a tabela de perfis de usuário
create table if not exists public.profiles (
  id uuid primary key references auth.users on delete cascade,
  name text,
  role text,
  user_id uuid references auth.users(id) on delete cascade not null default auth.uid()
);

-- Permite acesso anônimo à tabela de perfis (necessário para o Supabase)
grant all on table public.profiles to anon, authenticated;

-- Função para criar um perfil para um novo usuário
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, name, role, user_id)
  values (new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'role', new.id);
  return new;
end;
$$;

-- Gatilho para chamar a função handle_new_user a cada novo registro em auth.users
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Políticas de segurança para a tabela de perfis
drop policy if exists "Users can insert their own profile." on public.profiles;
create policy "Users can insert their own profile." on public.profiles for insert with check (auth.uid() = id);

drop policy if exists "Users can view their own profile." on public.profiles;
create policy "Users can view their own profile." on public.profiles for select using (auth.uid() = id);

drop policy if exists "Users can update their own profile." on public.profiles;
create policy "Users can update their own profile." on public.profiles for update using (auth.uid() = id);

drop policy if exists "Admins can manage any profile." on public.profiles;
create policy "Admins can manage any profile." on public.profiles for all using (
  (select rol from public.profiles where id = auth.uid()) = 'admin'
);

-- Cria a tabela de itens do cardápio
create table if not exists public.menu_items (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  price numeric(10, 2) not null,
  category text,
  image_url text,
  stock integer,
  low_stock_threshold integer,
  unit text,
  user_id uuid references auth.users(id) on delete cascade not null default auth.uid()
);

-- Permite acesso total à tabela de itens do cardápio para usuários autenticados
grant all on table public.menu_items to authenticated;

-- Políticas de segurança para a tabela de itens do cardápio
drop policy if exists "Users can manage their own menu items." on public.menu_items;
create policy "Users can manage their own menu items." on public.menu_items for all using (auth.uid() = user_id);

-- Cria a tabela de clientes
create table if not exists public.clients (
  id bigint generated by default as identity primary key,
  name text not null,
  phone text,
  document text,
  user_id uuid references auth.users(id) on delete cascade not null default auth.uid()
);

-- Permite acesso total à tabela de clientes para usuários autenticados
grant all on table public.clients to authenticated;

-- Políticas de segurança para a tabela de clientes
drop policy if exists "Users can manage their own clients." on public.clients;
create policy "Users can manage their own clients." on public.clients for all using (auth.uid() = user_id);


-- Cria um bucket de armazenamento para imagens de produtos
insert into storage.buckets (id, name, public)
values ('product_images', 'product_images', false)
on conflict (id) do nothing;

-- Políticas de segurança para o bucket de imagens de produtos
drop policy if exists "Authenticated users can select product images" on storage.objects;
create policy "Authenticated users can select product images" on storage.objects for select to authenticated using (
  bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Authenticated users can insert product images" on storage.objects;
create policy "Authenticated users can insert product images" on storage.objects for insert to authenticated with check (
  bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Authenticated users can update product images" on storage.objects;
create policy "Authenticated users can update product images" on storage.objects for update to authenticated using (
  bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);

drop policy if exists "Authenticated users can delete product images" on storage.objects;
create policy "Authenticated users can delete product images" on storage.objects for delete to authenticated using (
  bucket_id = 'product_images' and (storage.foldername(name))[1] = auth.uid()::text
);
